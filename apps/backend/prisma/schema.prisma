// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  StoreId   Int                 @id @default(autoincrement())
  StoreName String
  Products  StoreProductPrice[] // Relation through join table to associate products with prices
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

model Product {
  ProductId    Int                  @id @default(autoincrement())
  ProductTitle String
  description  String?
  barcode      String?              @unique // Barcode directly on the product
  categories   ProductsOnCategory[] // Many-to-many relation through ProductsOnCategory
  Stores       StoreProductPrice[] // Relation through join table to associate stores with prices
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
}

model StoreProductPrice {
  id        Int      @id @default(autoincrement())
  price     Float // Price for the product in this specific store
  Store     Store    @relation(fields: [storeId], references: [StoreId])
  storeId   Int
  Product   Product  @relation(fields: [productId], references: [ProductId])
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id       Int                  @id @default(autoincrement())
  name     String
  Products ProductsOnCategory[] // Many-to-many relation through ProductsOnCategory
}

model ProductsOnCategory {
  productId  Int
  categoryId Int
  Product    Product  @relation(fields: [productId], references: [ProductId], onDelete: Cascade)
  Category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId]) // Composite primary key
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Stores {
  StoreId   Int        @id @default(autoincrement())
  StoreName String
  address   String?
  Products  Products[] // One-to-many relation with Products
  Prices    Prices[]
}

model Products {
  ProductId     Int                  @id @default(autoincrement())
  ProductTitle  String
  description   String?
  Barcodes      Barcodes[] // Relation to Barcodes model
  Prices        Prices[] // Relation to Prices model for different stores
  categories    ProductsOnCategory[] // Many-to-many relation through ProductsOnCategory
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  Stores        Stores?              @relation(fields: [storesStoreId], references: [StoreId])
  storesStoreId Int?
}

model Prices {
  PriceId   Int      @id @default(autoincrement())
  price     Float // Price for the product
  storeId   Int // Foreign key to Stores
  Store     Stores   @relation(fields: [storeId], references: [StoreId])
  productId Int // Foreign key to Products
  Product   Products @relation(fields: [productId], references: [ProductId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Barcodes {
  BarcodeId Int      @id @default(autoincrement())
  barcode   String   @unique // Barcode for scanning
  productId Int // Foreign key to Products
  Product   Products @relation(fields: [productId], references: [ProductId])
}

model Category {
  id       Int                  @id @default(autoincrement())
  name     String
  Products ProductsOnCategory[] // Many-to-many relation through ProductsOnCategory
}

model ProductsOnCategory {
  productId  Int
  categoryId Int
  Product    Products @relation(fields: [productId], references: [ProductId], onDelete: Cascade)
  Category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId]) // Composite primary key
}
